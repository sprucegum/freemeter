#!/usr/bin/python3
'''
    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
'''
import psutil, serial, time, random

POLLING_HZ = 20
POLLING_PERIOD = 1.0 / POLLING_HZ


class meter:
    '''
            @todo: autodetect the serial port
            @todo: add a frames per second metric
    '''

    def __init__(self, interval):
        print("initializing")
        self.serialConnect()
        self.interval = interval
        self.maxDiskDelta = 1.0
        self.lastDisk = psutil.disk_io_counters().write_count + psutil.disk_io_counters().read_count

    def serialConnect(self):
        self.ser = serial.Serial('/dev/ttyACM0')

    def trim(self, x):
        return min(255, max(0, x))

    def getCpu(self):
        loads = [(i / 100.) for i in psutil.cpu_percent(self.interval, True)]
        usage = random.choice(loads)
        # usage = (sum(loads)/len(loads) + max(loads))/2 # adjusted usage = avg + max / 2
        return self.trim(int((usage) * 255))

    def getDisk(self):
        writes = psutil.disk_io_counters().write_count
        reads = psutil.disk_io_counters().read_count
        currentDisk = writes + reads
        diskDelta = currentDisk - self.lastDisk
        self.lastDisk = currentDisk
        # print 'diskDelta:' + str(diskDelta)
        # print 'maxDiskDelta:' + str(self.maxDiskDelta)
        self.maxDiskDelta = max(diskDelta, self.maxDiskDelta)
        self.maxDiskDelta -= self.maxDiskDelta / (60 * POLLING_HZ)
        self.maxDiskDelta = max(0, self.maxDiskDelta)
        return self.trim((int((float(diskDelta) / float(self.maxDiskDelta)) * 255)))

    def getMem(self):
        # total,used,free,percentusage = psutil.phymem_usage()
        # total, available, percentusage, used, free, active, inactive, buffers, cached, shared = psutil.virtual_memory()
        vm = psutil.virtual_memory()
        return self.trim(int((vm.percentusage / 100.0) * 255))

    def run(self):
        while (True):
            try:
                cpu = self.getCpu()
                # mem = self.getMem()
                # disk = self.getDisk()
                # print('serial command = ' + str(cpu) + ' ' + str(disk) + ' ' + str(mem))
                self.ser.write(cpu.to_bytes(1, 'big'))
                # self.ser.write(disk.to_bytes(1,'big'))
                # self.ser.write(mem.to_bytes(1,'big'))
                time.sleep(self.interval)
            except Exception as e:
                print(e)
                self.ser.close()
                time.sleep(5)
                try:
                    self.serialConnect()

                except:
                    print("Couldn't connect")


if __name__ == "__main__":
    thismeter = meter(POLLING_PERIOD)
    thismeter.run()
# !/usr/bin/python3
'''
    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
'''
import psutil, serial, time, random

POLLING_HZ = 20
POLLING_PERIOD = 1.0 / POLLING_HZ


class meter:
    '''
            @todo: autodetect the serial port
            @todo: add a frames per second metric
    '''

    def __init__(self, interval):
        print("initializing")
        self.serialConnect()
        self.interval = interval
        self.maxDiskDelta = 1.0
        self.lastDisk = psutil.disk_io_counters().write_count + psutil.disk_io_counters().read_count

    def serialConnect(self):
        self.ser = serial.Serial('/dev/ttyACM0')

    def trim(self, x):
        return min(255, max(0, x))

    def getCpu(self):
        loads = [(i / 100.) for i in psutil.cpu_percent(self.interval, True)]
        usage = random.choice(loads)
        # usage = (sum(loads)/len(loads) + max(loads))/2 # adjusted usage = avg + max / 2
        return self.trim(int((usage) * 255))

    def getDisk(self):
        writes = psutil.disk_io_counters().write_count
        reads = psutil.disk_io_counters().read_count
        currentDisk = writes + reads
        diskDelta = currentDisk - self.lastDisk
        self.lastDisk = currentDisk
        # print 'diskDelta:' + str(diskDelta)
        # print 'maxDiskDelta:' + str(self.maxDiskDelta)
        self.maxDiskDelta = max(diskDelta, self.maxDiskDelta)
        self.maxDiskDelta -= self.maxDiskDelta / (60 * POLLING_HZ)
        self.maxDiskDelta = max(0, self.maxDiskDelta)
        return self.trim((int((float(diskDelta) / float(self.maxDiskDelta)) * 255)))

    def getMem(self):
        # total,used,free,percentusage = psutil.phymem_usage()
        # total, available, percentusage, used, free, active, inactive, buffers, cached, shared = psutil.virtual_memory()
        vm = psutil.virtual_memory()
        return self.trim(int((vm.percentusage / 100.0) * 255))

    def run(self):
        while (True):
            try:
                cpu = self.getCpu()
                # mem = self.getMem()
                # disk = self.getDisk()
                # print('serial command = ' + str(cpu) + ' ' + str(disk) + ' ' + str(mem))
                self.ser.write(cpu.to_bytes(1, 'big'))
                # self.ser.write(disk.to_bytes(1,'big'))
                # self.ser.write(mem.to_bytes(1,'big'))
                time.sleep(self.interval)
            except Exception as e:
                print(e)
                self.ser.close()
                time.sleep(5)
                try:
                    self.serialConnect()
                except:
                    print("Couldn't connect")


if __name__ == "__main__":
    thismeter = meter(POLLING_PERIOD)
    thismeter.run()
