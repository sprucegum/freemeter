#!/usr/bin/python3
'''
    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
'''
import psutil, serial, time, random, yaml

POLLING_HZ = 20
POLLING_PERIOD = 1.0 / POLLING_HZ


class meter:
    '''
            @todo: autodetect the serial port
            @todo: add a frames per second metric
    '''

    def __init__(self, interval):
        print("initializing")
        with open('meter_config.yaml') as c:
            self.config = yaml.load(c.read())
        self.serialConnect()
        self.interval = interval
        self.maxDiskDelta = 1.0
        self.lastDisk = psutil.disk_io_counters().write_count + psutil.disk_io_counters().read_count

    def serialConnect(self):
        self.ser = serial.Serial(self.config['port'])

    # Limit values between 0 and 255
    def clamp(self, x):
        return min(255, max(0, x))

    def writeByte(self, i):
        self.ser.write(int(i).to_bytes(1, 'big'))

    def getCpu(self):
        loads = [(i / 100.) for i in psutil.cpu_percent(self.interval, True)]
        usage = random.choice(loads)
        return self.clamp(int((usage) * 255))

    def getMem(self):
        vm = psutil.virtual_memory()
        return self.clamp(int((vm.percent / 100.0) * 255))

    def run(self):
        while (True):
            try:
                self.ser.timeout = 0.1
                for pin, stat in self.config['pins'].items():
                    statVal = -1
                    if stat == 'CPU':
                        statVal = self.getCpu()
                    if stat == 'RAM':
                        statVal = self.getMem()
                    if statVal >= 0:
                        self.writeByte(pin)
                        self.writeByte(statVal)
            # two 255 characters signals to the meter that the command is complete.
                self.writeByte(255)
                self.writeByte(255)
                time.sleep(self.interval)
            except Exception as e:
                print(e)
                self.ser.close()
                time.sleep(5)
                try:
                    self.serialConnect()
                except:
                    print("Couldn't connect")


if __name__ == "__main__":
    thismeter = meter(POLLING_PERIOD)
    thismeter.run()
